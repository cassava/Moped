OPEN BUGS
============

moped?.py #34:2010-08-19 [new] :high
 [bug]
    the query
        5:19
    fails with an unexpected error

moped?.py #33:2010-01-05 [new] :med
 [bug]
    the query
        +r<ae:".*" !b: End of Silence>
    should not include End of Silence, but it does.
    So the list effectively gets cleared.
    
    If we could implement a way to have several lists in memory at a time:
        playlist
        media-library
    then we could search in both of these... it might be more efficient
    for more complex queries. If we could then use real SETS based on
    filenames or something, that would be even better.
    
    It would make the implementation much cleaner.
    

mopedparser.py #15:2009-03-10 [new] :high
 [enh]
    fix the _group_process() function so that it uses the new
    songlist_search() function, which is more cpu efficient,
    and actually eliminates completely the need to use any
    of the filter functions of mpdcommunal (a shame I suppose).
    eventually, it may be merged into mpdcommunal, maybe.

mopedparser.py #25:2009-06-08 [new] :low
 [enh]
    implement something like a picker, a flag that shows you everything that
    it found in the search, all numerated, which then let you choose which
    songs that you want to add. This saves you one extra command.

moped.py #27:2009-06-08 [new] :high
 [enh]
    implement a proper configuration parsing program.
    
moped.py #28:2009=06-08 [new] :med
 [enh]
    don't require any external dependencies: zenity,
    implement the library in python code again.

mopedparser.py #30:2009-10-06 [new] :med
 [enh]
    right now the parsing and processing system using five primary functions:
      parse_argument_list()
      _process_group()
      _parse_group()
      _process_unit()
      _parse_unit()
    It would be better if we could parse the entire thing once, turn it into
    some kind of object, and have another method read that object, and do the
    searches based on information from that object. That way, the code wouldn't
    be spread all over 5 functions, but clearly modularized into two separate
    functions.

moped.py #31:2009-10-30 [new] :med
 [enh]
    move the moped configuration files to:
        ~/.moped/moped.conf
    create the folder structure
        ~/.moped/playlists/
    allow the putting of 'playlists' in the playlists folder. These can then
    be specified on the command line, and it means that commonly used playlists
    do not have to continuously be typed up again and again.
    
    Filename should end in .mpl
    Format of first line in file:
        $MopedPlaylist:ID#:Name$
    Any lines thereafter should be a moped (search) command.
    
    Example:
    $MopedPlaylist:0:default$
    a: This artist should be added
    !t: But please get rid of this song!
    ma: This this this "and this artist too"
    eb: '.*Andrea.*'

mopedparser.py #32:2009-11-11 [new] :med
 [enh]
    allow an option to automatically escape all single quotes, and have this
    set by default. (unless e is set? or all the time?)

